# Reads are sometimes split into bins when they come off of the sequencer.
import os
from snakemake.utils import update_config

config_default = {
    'settings' : {
        'email' : os.getenv("USER_EMAIL", None),
        'java' : {
            'java_mem' : "8g",
            'java_tmpdir' : "/tmp",
        },
        'threads' : 8,
        'temporary_rules': [],
        'protected_rules': [],
    },
    'bio.ngs.settings.': {
        'fastq_suffix': '.fastq.gz'
    },
}

update_config(config_default, config)
config = config_default

def _get_upstream(prefix):
    """ Use file matching to determine what the upstream re is. """
    try:
        config['settings']['sample_organization'].run_id_re.match(prefix)
        return config['settings']['sample_organization'].run_id_re.file
    except:
        pass

    try:
        config['settings']['sample_organization'].sample_re.match(prefix)
        return config['settings']['sample_organization'].raw_run_re.file
    except:
        pass

def _combine_inputs_fq(wildcards):
    print(wildcards.prefix)
    tgt = IOTarget(_get_upstream(wildcards.prefix), suffix=config['bio.ngs.settings']['fastq_suffix'])
    return make_targets(tgt_re=tgt, samples=config['_samples'])

rule combine_fq:
    input: _combine_inputs_fq
    output: '{prefix}' + config['bio.ngs.settings']['fastq_suffix']
    run:
        print(input)
        if len(input) == 1:
            input = input[0]
            output = output[0]
            relpath = os.path.relpath(input, os.path.dirname(output))
            odir = os.path.dirname(output)
            oname = os.path.basename(output)
            shell('cd {odir}; ln -fs {relpath} ./{output} && touch -h {output}'.format(odir=odir, relpath=relpath, output=oname))
        else:
            for i in input:
                shell('cat {0} >> {1}'.format(i, output))
